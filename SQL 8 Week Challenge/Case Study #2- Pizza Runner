--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Introduction
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Case study URL: https://8weeksqlchallenge.com/case-study-2/

--Danny was scrolling through his Instagram feed when something really caught his eye - “80s Retro Styling and Pizza Is The Future!”
--Danny was sold on the idea. Danny started by recruiting “runners” to deliver fresh pizza from Pizza Runner Headquarters (otherwise known as Danny’s house) and also 
--maxed out his credit card to pay freelance developers to build a mobile app to accept orders from customers.

--Because Danny had a few years of experience as a data scientist - he was very aware that data collection was going to be critical for his business’ growth.
--He has prepared for us an entity relationship diagram of his database design but requires further assistance to clean his data and apply some basic calculations 
--so he can better direct his runners and optimise Pizza Runner’s operations.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Set Up
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE SCHEMA pizza_runner;
SET search_path = pizza_runner;

DROP TABLE IF EXISTS runners;
CREATE TABLE runners (
  "runner_id" INTEGER,
  "registration_date" DATE
);
INSERT INTO runners
  ("runner_id", "registration_date")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');


DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (
  "order_id" INTEGER,
  "customer_id" INTEGER,
  "pizza_id" INTEGER,
  "exclusions" VARCHAR(4),
  "extras" VARCHAR(4),
  "order_time" TIMESTAMP
);

INSERT INTO customer_orders
  ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');


DROP TABLE IF EXISTS runner_orders;
CREATE TABLE runner_orders (
  "order_id" INTEGER,
  "runner_id" INTEGER,
  "pickup_time" VARCHAR(19),
  "distance" VARCHAR(7),
  "duration" VARCHAR(10),
  "cancellation" VARCHAR(23)
);

INSERT INTO runner_orders
  ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');


DROP TABLE IF EXISTS pizza_names;
CREATE TABLE pizza_names (
  "pizza_id" INTEGER,
  "pizza_name" TEXT
);
INSERT INTO pizza_names
  ("pizza_id", "pizza_name")
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');


DROP TABLE IF EXISTS pizza_recipes;
CREATE TABLE pizza_recipes (
  "pizza_id" INTEGER,
  "toppings" TEXT
);
INSERT INTO pizza_recipes
  ("pizza_id", "toppings")
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


DROP TABLE IF EXISTS pizza_toppings;
CREATE TABLE pizza_toppings (
  "topping_id" INTEGER,
  "topping_name" TEXT
);
INSERT INTO pizza_toppings
  ("topping_id", "topping_name")
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');
  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Clean Up
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--For table Customer_orders:
--Replace all stringed (null) values and blank spaces with NULL value for constistency. 
--Store in a new table.

CREATE TABLE cleaned_cust_orders AS

SELECT order_id, customer_id, pizza_id, 
  CASE 
 	WHEN exclusions = '' THEN NULL
  	WHEN exclusions= 'null' THEN NULL
  	ELSE exclusions
  END AS exclusions,
   CASE 
  	WHEN extras = '' THEN NULL
  	WHEN extras = 'null' THEN NULL
  	ELSE extras
  END AS extras,
 order_time
 FROM Customer_orders;
 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--For table runner_orders:
--Replace all stringed (null) values and blank spaces with NULL value for constistency.
--Cast distance and duration as integers.
--Store in a new table

CREATE TABLE cleaned_runner_orders AS

WITH new_runner AS (

SELECT order_id, runner_id, 
  CASE 
 	WHEN pickup_time = '' THEN NULL
  	WHEN pickup_time = 'null' THEN NULL
  	ELSE pickup_time
  END AS pickup_time,
   CASE 
  	WHEN distance = '' THEN NULL
  	WHEN distance = 'null' THEN NULL
  	ELSE distance
  END AS distance_km,
 CASE 
  	WHEN duration = '' THEN NULL
  	WHEN duration = 'null' THEN NULL
  	ELSE duration
  END AS duration_mins, 
 CASE 
  	WHEN cancellation = '' THEN NULL
  	WHEN cancellation = 'null' THEN NULL
  	ELSE cancellation
  END AS cancellation
 FROM Runner_orders
 )
 
SELECT
		order_id,
		runner_id,
		pickup_time,
		CAST(distance_km AS DECIMAL(3,1)) AS distance_km, 
		CAST(duration_mins AS SIGNED INT) AS duration_mins,
		cancellation
FROM new_runner;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Case Study Questions
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Pizza Metrics
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--How many pizzas were ordered?

SELECT COUNT(order_id) AS number_of_orders
FROM cleaned_cust_orders;

--How many unique customer orders were made?

SELECT COUNT(DISTINCT order_id) AS Unique_orders
FROM cleaned_cust_orders;

--How many successful orders were delivered by each runner?

SELECT runner_id, COUNT(DISTINCT order_id) AS pizza_deliveries
FROM cleaned_runner_orders
WHERE cancellation IS NULL
GROUP BY runner_id;

--How many of each type of pizza was delivered?

SELECT pizza_name, COUNT(cc.pizza_id) AS pizza_orders
FROM cleaned_cust_orders cc
INNER JOIN cleaned_runner_orders cr
ON cc.order_id = cr.order_id
INNER JOIN pizza_names pn
ON pn.pizza_id = cc.pizza_id
WHERE cancellation IS NULL
GROUP BY cc.pizza_id;

--How many Vegetarian and Meatlovers were ordered by each customer?

SELECT customer_id, pizza_name, COUNT(cc.pizza_id) AS pizza_orders
FROM cleaned_cust_orders cc
INNER JOIN pizza_names pn
ON pn.pizza_id = cc.pizza_id
GROUP BY customer_id, pizza_name;

--What was the maximum number of pizzas delivered in a single order?

SELECT COUNT(pizza_id) AS max_pizza_orders_per_single_delivery
FROM cleaned_cust_orders cc
INNER JOIN cleaned_runner_orders cr
ON cc.order_id = cr.order_id
WHERE cancellation IS NULL
GROUP BY cc.order_id
ORDER BY max_pizza_orders_per_single_delivery desc
LIMIT 1;

--For each customer, how many delivered pizzas had at least 1 change and how many had no changes?

SELECT customer_id,
SUM(CASE
	WHEN exclusions NOT NULL OR extras NOT NULL THEN 1
    ELSE 0
END) AS at_least_one_change,
SUM(CASE
	WHEN exclusions IS NULL AND extras IS NULL THEN 1
    ELSE 0
END) AS no_changes
FROM cleaned_cust_orders cc
INNER JOIN cleaned_runner_orders cr
ON cc.order_id = cr.order_id
WHERE cancellation IS NULL
GROUP BY customer_id;

--How many pizzas were delivered that had both exclusions and extras?

SELECT COUNT(cc.order_id) AS both_exclusions_and_extras
FROM cleaned_cust_orders cc
INNER JOIN cleaned_runner_orders cr
ON cc.order_id = cr.order_id
WHERE cancellation IS NULL AND exclusions NOT NULL AND extras NOT NULL;

--What was the total volume of pizzas ordered for each hour of the day?

SELECT strftime('%H', order_time) AS hour, COUNT(order_id) AS pizzas_ordered
FROM cleaned_cust_orders
GROUP BY hour
ORDER BY hour;

--What was the volume of orders for each day of the week?

SELECT 
CASE
CAST (strftime('%w', order_time) as integer)
  WHEN 0 THEN 'Sunday'
  WHEN 1 THEN 'Monday'
  WHEN 2 THEN 'Tuesday'
  WHEN 3 THEN 'Wednesday'
  WHEN 4 THEN 'Thursday'
  WHEN 5 THEN 'Friday'
  ELSE 'Saturday' 
END as weekday, 
COUNT(order_id) AS pizzas_ordered
FROM cleaned_cust_orders
GROUP BY weekday
ORDER BY pizzas_ordered desc;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Runner and Customer Experience
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)

SELECT strftime('%W', registration_date) AS week_of_registration, COUNT(runner_id) AS number_of_runners
FROM Runners
GROUP BY week_of_registration
ORDER BY week_of_registration;

--What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?

SELECT runner_id, 
CAST ((AVG((JulianDay(pickup_time) - JulianDay(order_time)))) * 24 * 60 AS INTEGER) AS avg_time_in_minutes
FROM cleaned_runner_orders cr
INNER JOIN cleaned_cust_orders cc
ON cr.order_id = cc.order_id
WHERE cancellation IS NULL
GROUP BY runner_id
ORDER BY avg_time_in_minutes;

--Is there any relationship between the number of pizzas and how long the order takes to prepare?

WITH set_up AS (

SELECT cc.order_id, COUNT(cc.order_id) AS pizza_count, 
CAST (((JulianDay(pickup_time) - JulianDay(order_time))) * 24 * 60 AS INTEGER) AS minutes_to_prepare
FROM cleaned_runner_orders cr
INNER JOIN cleaned_cust_orders cc
ON cr.order_id = cc.order_id
WHERE cancellation IS NULL
GROUP BY cc.order_id
)

SELECT pizza_count, AVG(minutes_to_prepare)
FROM set_up
GROUP BY pizza_count;

--What was the average distance travelled for each customer?

SELECT customer_id, ROUND(AVG(distance_km),1)
FROM cleaned_runner_orders cr
INNER JOIN cleaned_cust_orders cc
ON cr.order_id = cc.order_id
WHERE cancellation IS NULL
GROUP BY customer_id;

--What was the difference between the longest and shortest delivery times for all orders?

SELECT MAX(duration_mins) - MIN(duration_mins)
FROM cleaned_runner_orders
WHERE cancellation IS NULL;

--What was the average speed for each runner for each delivery and do you notice any trend for these values?

SELECT runner_id, order_id, (distance_km * 60 / duration_mins) AS 'Km/H'
FROM cleaned_runner_orders
WHERE cancellation IS NULL
GROUP BY runner_id, order_id
ORDER BY order_id;

--What is the successful delivery percentage for each runner?

SELECT runner_id,
CAST (100.0 * count(pickup_time) / count(order_id) AS numeric(5,2)) as percentage
FROM cleaned_runner_orders
GROUP BY runner_id;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Ingredient Optimisation
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--What are the standard ingredients for each pizza?

--What was the most commonly added extra?

--What was the most common exclusion?

--Generate an order item for each record in the customers_orders table in the format of one of the following:
--Meat Lovers
--Meat Lovers - Exclude Beef
--Meat Lovers - Extra Bacon
--Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers

--Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and 
--add a 2x in front of any relevant ingredients
--For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"

--What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Pricing and Ratings
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes -
--how much money has Pizza Runner made so far if there are no delivery fees?

--What if there was an additional $1 charge for any pizza extras?- Add cheese is $1 extra

--The Pizza Runner team now wants to add an additional ratings system that allows customers to rate their runner, how would you design an additional table 
--for this new dataset - generate a schema for this new table and insert your own data for ratings for each successful customer order between 1 to 5.

--Using your newly generated table - can you join all of the information together to form a table which has the following information for successful deliveries?
--customer_id
--order_id
--runner_id
--rating
--order_time
--pickup_time
--Time between order and pickup
--Delivery duration
--Average speed
--Total number of pizzas

--If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras and each runner is paid $0.30 per kilometre traveled -
--how much money does Pizza Runner have left over after these deliveries?


